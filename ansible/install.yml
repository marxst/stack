---
- name: base setup
  hosts: stack-nodes
  become: yes
  tags:
    - common

  roles:
    - role: repositories
      tags: ['repositories']
    - role: base
      tags: ['base']
    - role: dummy-interfaces
      tags: ['dummy-interfaces']
      dummies:
        - { dummy: dummy0, name: mgmt0 }
        - { dummy: dummy1, name: tunnel0 }
    - role: network
      tags: ['network']

  post_tasks:
    - name: re-gather facts (interfaces might have changed)
      setup:

    - name: get mgmt interface ip
      set_fact:
        os_mgmt_ip: "{{ hostvars[inventory_hostname]['ansible_' + os_mgmt_iface]['ipv4']['address'] }}"
      when: (os_mgmt_iface is defined) and (hostvars[inventory_hostname]['ansible_' + os_mgmt_iface] is defined)

    - name: get storage interface ip
      set_fact:
        os_storage_ip: "{{ hostvars[inventory_hostname]['ansible_' + os_storage_iface]['ipv4']['address'] }}"
      when: (os_storage_iface is defined) and (hostvars[inventory_hostname]['ansible_' + os_storage_iface] is defined)

    - name: get tunnel interface ip
      set_fact:
        os_tunnel_ip: "{{ hostvars[inventory_hostname]['ansible_' + os_tunnel_iface]['ipv4']['address'] }}"
      when: (os_tunnel_iface is defined) and (hostvars[inventory_hostname]['ansible_' + os_tunnel_iface] is defined)

    - name: get public interface ip
      set_fact:
        os_public_ip: "{{ hostvars[inventory_hostname]['ansible_' + os_public_iface]['ipv4']['address'] }}"
      when: (os_public_iface is defined) and (hostvars[inventory_hostname]['ansible_' + os_public_iface] is defined)

- name: set up controller node (phase 1)
  hosts: controller-nodes
  gather_facts: no
  become: yes
  tags:
    - controller

  roles:
    - role: memcached
      tags: ['memcached']
    - role: mariadb
      tags: ['mariadb']
    - role: rabbitmq
      tags: ['rabbitmq']
    - role: mongodb
      tags: ['mongodb']
    - role: os_common
      tags: ['os_common']
    - role: keystone
      tags: ['keystone']

- name: set up storage nodes
  hosts: storage-nodes
  gather_facts: no
  become: yes
  tags:
    - storage

  pre_tasks:
    - name: create partitions
      command: parted -s {{ item }} mklabel gpt mkpart primary 2048s {{ cinder_size }} mkpart primary {{ cinder_size }} {{ swift_size }}
      args:
        creates: '{{ item }}1'
      with_items:
        - '{{ disks }}'

    - name: create software raid
      command: mdadm --create {{ raid1_dest_device }} -e 1.2 --level=1 --raid-devices={{ raid1_src_devices|length }} {{ raid1_src_devices|join(' ') }}
      args:
        creates: '{{ raid1_dest_device }}'

    - name: get raid definition
      command: mdadm -Es
      register: raid_definition
      changed_when: false

    - name: persist raid definition in mdadm.conf
      lineinfile:
        dest: /etc/mdadm/mdadm.conf
        line: '{{ raid_definition.stdout }}'
        owner: root
        group: root
        mode: 0644
        create: yes

  roles:
    - role: cinder-storage
      tags: ['cinder','cinder-storage']
    - role: cinder-lvm
      tags: ['cinder','cinder-lvm']
    - role: swift-fs
      tags: ['swift','swift-fs']
    - role: swift-storage
      tags: ['swift','swift-storage']
    - role: reboot
      tags: ['reboot',reboot-storage']

- name: set up compute nodes
  hosts: compute-nodes
  gather_facts: no
  become: yes
  tags:
    - compute

  roles:
    - role: nova-compute
      tags: ['nova','nova-compute']
    - role: neutron-legacy-ovs-compute
      tags: ['neutron','neutron-legacy-ovs-compute']
    - role: reboot
      tags: ['reboot',reboot-compute']

- name: set up controller node (phase 2)
  hosts: controller-nodes
  gather_facts: no
  become: yes
  tags:
    - controller

  roles:
    - role: cinder-controller
      tags: ['cinder','cinder-controller']
    - role: swift-controller
      tags: ['swift','swift-controller']
    - role: glance
      tags: ['glance']
    - role: glance-swift
      tags: ['glance','glance-swift']
    - role: nova-controller
      tags: ['nova','nova-controller']
    - role: neutron-controller
      tags: ['neutron','neutron-controller']
    - role: neutron-legacy-ovs-controller
      tags: ['neutron','neutron-legacy-ovs-controller']
    - role: horizon
      tags: ['horizon']
    - role: reboot
      tags: ['reboot','reboot-controller']

# vim: ft=ansible
